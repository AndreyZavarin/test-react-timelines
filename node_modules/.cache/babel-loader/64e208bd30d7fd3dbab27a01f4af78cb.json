{"ast":null,"code":"import { START_YEAR, NUM_OF_YEARS, MONTH_NAMES, MONTHS_PER_YEAR, QUARTERS_PER_YEAR, MONTHS_PER_QUARTER, NUM_OF_MONTHS, MAX_TRACK_START_GAP, MAX_ELEMENT_GAP, MAX_MONTH_SPAN, MIN_MONTH_SPAN, MAX_NUM_OF_SUBTRACKS, NUM_OF_TRACKS, dataTrack } from './constants';\nimport { fill, hexToRgb, colourIsLight, addMonthsToYear, addMonthsToYearAsDate, nextColor, randomTitle } from './utils';\nimport moment from 'moment';\nexport const buildQuarterCells = () => {\n  const v = [];\n\n  for (let i = 0; i < QUARTERS_PER_YEAR * NUM_OF_YEARS; i += 1) {\n    const quarter = i % 4 + 1;\n    const startMonth = i * MONTHS_PER_QUARTER;\n    const s = addMonthsToYear(START_YEAR, startMonth);\n    const e = addMonthsToYear(START_YEAR, startMonth + MONTHS_PER_QUARTER);\n    v.push({\n      id: `${s.year}-q${quarter}`,\n      title: `Q${quarter} ${s.year}`,\n      start: new Date(`${s.year}-${s.month}-01`),\n      end: new Date(`${e.year}-${e.month}-01`)\n    });\n  }\n\n  return v;\n};\nexport const buildMonthCells = () => {\n  const v = [];\n\n  for (let i = 0; i < MONTHS_PER_YEAR * NUM_OF_YEARS; i += 1) {\n    const startMonth = i;\n    const start = addMonthsToYearAsDate(START_YEAR, startMonth);\n    const end = addMonthsToYearAsDate(START_YEAR, startMonth + 1);\n    v.push({\n      id: `m${startMonth}`,\n      title: MONTH_NAMES[i % 12],\n      start,\n      end\n    });\n  }\n\n  return v;\n};\nexport const buildTimebar = () => [{\n  id: 'quarters',\n  title: 'Quarters',\n  cells: buildQuarterCells(),\n  style: {}\n}, {\n  id: 'months',\n  title: 'Months',\n  cells: buildMonthCells(),\n  useAsGrid: true,\n  style: {}\n}];\nexport const buildElement = ({\n  trackId,\n  start,\n  end,\n  i\n}) => {\n  const bgColor = nextColor();\n  const color = colourIsLight(...hexToRgb(bgColor)) ? '#000000' : '#ffffff';\n  return {\n    id: `t-${trackId}-el-${i}`,\n    title: randomTitle(),\n    start,\n    end,\n    style: {\n      backgroundColor: `#${bgColor}`,\n      color,\n      borderRadius: '4px',\n      boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\n      textTransform: 'capitalize'\n    }\n  };\n};\nexport const buildTrackStartGap = () => Math.floor(Math.random() * MAX_TRACK_START_GAP);\nexport const buildElementGap = () => Math.floor(Math.random() * MAX_ELEMENT_GAP);\nexport const buildElements = trackId => {\n  const v = [];\n  let i = 1;\n  let month = buildTrackStartGap();\n\n  while (month < NUM_OF_MONTHS) {\n    let monthSpan = Math.floor(Math.random() * (MAX_MONTH_SPAN - (MIN_MONTH_SPAN - 1))) + MIN_MONTH_SPAN;\n\n    if (month + monthSpan > NUM_OF_MONTHS) {\n      monthSpan = NUM_OF_MONTHS - month;\n    }\n\n    const start = addMonthsToYearAsDate(START_YEAR, month);\n    const end = addMonthsToYearAsDate(START_YEAR, month + monthSpan);\n    v.push(buildElement({\n      trackId,\n      start,\n      end,\n      i\n    }));\n    const gap = buildElementGap();\n    month += monthSpan + gap;\n    i += 1;\n  }\n\n  return v;\n};\nexport const buildSubtrack = (trackId, subtrackId) => ({\n  id: `track-${trackId}-${subtrackId}`,\n  title: `Subtrack ${subtrackId}`,\n  elements: buildElements(subtrackId)\n});\nexport const buildTrack = trackId => {\n  const tracks = fill(Math.floor(Math.random() * MAX_NUM_OF_SUBTRACKS) + 1).map(i => buildSubtrack(trackId, i + 1));\n  return {\n    id: `track-${trackId}`,\n    title: `Track ${trackId}`,\n    elements: buildElements(trackId),\n    tracks,\n    // hasButton: true,\n    // link: 'www.google.com',\n    isOpen: false\n  };\n}; //>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n/*\r\n*  const tracksById = fill(NUM_OF_TRACKS).reduce((acc, i) => {\r\n            const track = buildTrack(i + 1)\r\n            acc[track.id] = track\r\n            return acc\r\n        }, {})\r\n*/\n\nexport const parseDateTracks = dataTrack => {\n  let mapDataTrack = {};\n  dataTrack.forEach(track => {\n    mapDataTrack[track.id.toString()] = newBuildTrack(track);\n  });\n  console.log('mapDataTrack', mapDataTrack);\n  return mapDataTrack;\n};\nexport const newBuildTrack = track => {\n  const tracks = track.childs.map((subtrack, idx) => newBuildSubtrack(track.id, idx + 1, subtrack));\n  return {\n    id: track.id,\n    title: track.title,\n    elements: newBuildElements(track.id, track.elements),\n    tracks,\n    isOpen: false\n  };\n};\nexport const newBuildElements = (trackId, elements) => {\n  return elements.map((el, idx) => {\n    return newBuildElement(trackId, el, idx);\n  });\n};\nexport const newBuildElement = (trackId, el, idx) => {\n  let a = moment(el.dateFrom);\n  console.log(a, a);\n  return {\n    id: `${trackId}-el-${idx}`,\n    title: el.title,\n    start: el.dateFrom,\n    end: el.dateTo,\n    style: {\n      backgroundColor: el.backgroundColor,\n      color: el.color,\n      borderRadius: '4px',\n      boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\n      textTransform: 'capitalize'\n    }\n  };\n};\nexport const newBuildSubtrack = (trackId, subtrackId, subtrack) => ({\n  id: subtrackId,\n  title: subtrack.title,\n  elements: newBuildElements(trackId, subtrack.elements)\n});","map":{"version":3,"sources":["C:/Users/PC/work/react-timeline-9000/src/builders.js"],"names":["START_YEAR","NUM_OF_YEARS","MONTH_NAMES","MONTHS_PER_YEAR","QUARTERS_PER_YEAR","MONTHS_PER_QUARTER","NUM_OF_MONTHS","MAX_TRACK_START_GAP","MAX_ELEMENT_GAP","MAX_MONTH_SPAN","MIN_MONTH_SPAN","MAX_NUM_OF_SUBTRACKS","NUM_OF_TRACKS","dataTrack","fill","hexToRgb","colourIsLight","addMonthsToYear","addMonthsToYearAsDate","nextColor","randomTitle","moment","buildQuarterCells","v","i","quarter","startMonth","s","e","push","id","year","title","start","Date","month","end","buildMonthCells","buildTimebar","cells","style","useAsGrid","buildElement","trackId","bgColor","color","backgroundColor","borderRadius","boxShadow","textTransform","buildTrackStartGap","Math","floor","random","buildElementGap","buildElements","monthSpan","gap","buildSubtrack","subtrackId","elements","buildTrack","tracks","map","isOpen","parseDateTracks","mapDataTrack","forEach","track","toString","newBuildTrack","console","log","childs","subtrack","idx","newBuildSubtrack","newBuildElements","el","newBuildElement","a","dateFrom","dateTo"],"mappings":"AAAA,SACIA,UADJ,EAEIC,YAFJ,EAGIC,WAHJ,EAIIC,eAJJ,EAKIC,iBALJ,EAMIC,kBANJ,EAOIC,aAPJ,EAQIC,mBARJ,EASIC,eATJ,EAUIC,cAVJ,EAWIC,cAXJ,EAYIC,oBAZJ,EAY0BC,aAZ1B,EAYyCC,SAZzC,QAaO,aAbP;AAeA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,eAAxC,EAAyDC,qBAAzD,EAAgFC,SAAhF,EAA2FC,WAA3F,QAA8G,SAA9G;AACA,OAAQC,MAAR,MAAoB,QAApB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACnC,QAAMC,CAAC,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,iBAAiB,GAAGH,YAAxC,EAAsDuB,CAAC,IAAI,CAA3D,EAA8D;AAC1D,UAAMC,OAAO,GAAID,CAAC,GAAG,CAAL,GAAU,CAA1B;AACA,UAAME,UAAU,GAAGF,CAAC,GAAGnB,kBAAvB;AACA,UAAMsB,CAAC,GAAGV,eAAe,CAACjB,UAAD,EAAa0B,UAAb,CAAzB;AACA,UAAME,CAAC,GAAGX,eAAe,CAACjB,UAAD,EAAa0B,UAAU,GAAGrB,kBAA1B,CAAzB;AACAkB,IAAAA,CAAC,CAACM,IAAF,CAAO;AACHC,MAAAA,EAAE,EAAG,GAAEH,CAAC,CAACI,IAAK,KAAIN,OAAQ,EADvB;AAEHO,MAAAA,KAAK,EAAG,IAAGP,OAAQ,IAAGE,CAAC,CAACI,IAAK,EAF1B;AAGHE,MAAAA,KAAK,EAAE,IAAIC,IAAJ,CAAU,GAAEP,CAAC,CAACI,IAAK,IAAGJ,CAAC,CAACQ,KAAM,KAA9B,CAHJ;AAIHC,MAAAA,GAAG,EAAE,IAAIF,IAAJ,CAAU,GAAEN,CAAC,CAACG,IAAK,IAAGH,CAAC,CAACO,KAAM,KAA9B;AAJF,KAAP;AAMH;;AACD,SAAOZ,CAAP;AACH,CAfM;AAiBP,OAAO,MAAMc,eAAe,GAAG,MAAM;AACjC,QAAMd,CAAC,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,eAAe,GAAGF,YAAtC,EAAoDuB,CAAC,IAAI,CAAzD,EAA4D;AACxD,UAAME,UAAU,GAAGF,CAAnB;AACA,UAAMS,KAAK,GAAGf,qBAAqB,CAAClB,UAAD,EAAa0B,UAAb,CAAnC;AACA,UAAMU,GAAG,GAAGlB,qBAAqB,CAAClB,UAAD,EAAa0B,UAAU,GAAG,CAA1B,CAAjC;AACAH,IAAAA,CAAC,CAACM,IAAF,CAAO;AACHC,MAAAA,EAAE,EAAG,IAAGJ,UAAW,EADhB;AAEHM,MAAAA,KAAK,EAAE9B,WAAW,CAACsB,CAAC,GAAG,EAAL,CAFf;AAGHS,MAAAA,KAHG;AAIHG,MAAAA;AAJG,KAAP;AAMH;;AACD,SAAOb,CAAP;AACH,CAdM;AAgBP,OAAO,MAAMe,YAAY,GAAG,MAAM,CAC9B;AACIR,EAAAA,EAAE,EAAE,UADR;AAEIE,EAAAA,KAAK,EAAE,UAFX;AAGIO,EAAAA,KAAK,EAAEjB,iBAAiB,EAH5B;AAIIkB,EAAAA,KAAK,EAAE;AAJX,CAD8B,EAO9B;AACIV,EAAAA,EAAE,EAAE,QADR;AAEIE,EAAAA,KAAK,EAAE,QAFX;AAGIO,EAAAA,KAAK,EAAEF,eAAe,EAH1B;AAIII,EAAAA,SAAS,EAAE,IAJf;AAKID,EAAAA,KAAK,EAAE;AALX,CAP8B,CAA3B;AAgBP,OAAO,MAAME,YAAY,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWV,EAAAA,KAAX;AAAkBG,EAAAA,GAAlB;AAAuBZ,EAAAA;AAAvB,CAAD,KAAgC;AACxD,QAAMoB,OAAO,GAAGzB,SAAS,EAAzB;AACA,QAAM0B,KAAK,GAAG7B,aAAa,CAAC,GAAGD,QAAQ,CAAC6B,OAAD,CAAZ,CAAb,GAAsC,SAAtC,GAAkD,SAAhE;AACA,SAAO;AACHd,IAAAA,EAAE,EAAG,KAAIa,OAAQ,OAAMnB,CAAE,EADtB;AAEHQ,IAAAA,KAAK,EAAEZ,WAAW,EAFf;AAGHa,IAAAA,KAHG;AAIHG,IAAAA,GAJG;AAKHI,IAAAA,KAAK,EAAE;AACHM,MAAAA,eAAe,EAAG,IAAGF,OAAQ,EAD1B;AAEHC,MAAAA,KAFG;AAGHE,MAAAA,YAAY,EAAE,KAHX;AAIHC,MAAAA,SAAS,EAAE,iCAJR;AAKHC,MAAAA,aAAa,EAAE;AALZ;AALJ,GAAP;AAaH,CAhBM;AAkBP,OAAO,MAAMC,kBAAkB,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB9C,mBAA3B,CAAjC;AACP,OAAO,MAAM+C,eAAe,GAAG,MAAMH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB7C,eAA3B,CAA9B;AAEP,OAAO,MAAM+C,aAAa,GAAGZ,OAAO,IAAI;AACpC,QAAMpB,CAAC,GAAG,EAAV;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIW,KAAK,GAAGe,kBAAkB,EAA9B;;AAEA,SAAOf,KAAK,GAAG7B,aAAf,EAA8B;AAC1B,QAAIkD,SAAS,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB5C,cAAc,IAAIC,cAAc,GAAG,CAArB,CAA/B,CAAX,IAAsEA,cAAtF;;AAEA,QAAIyB,KAAK,GAAGqB,SAAR,GAAoBlD,aAAxB,EAAuC;AACnCkD,MAAAA,SAAS,GAAGlD,aAAa,GAAG6B,KAA5B;AACH;;AAED,UAAMF,KAAK,GAAGf,qBAAqB,CAAClB,UAAD,EAAamC,KAAb,CAAnC;AACA,UAAMC,GAAG,GAAGlB,qBAAqB,CAAClB,UAAD,EAAamC,KAAK,GAAGqB,SAArB,CAAjC;AACAjC,IAAAA,CAAC,CAACM,IAAF,CACIa,YAAY,CAAC;AACTC,MAAAA,OADS;AAETV,MAAAA,KAFS;AAGTG,MAAAA,GAHS;AAITZ,MAAAA;AAJS,KAAD,CADhB;AAQA,UAAMiC,GAAG,GAAGH,eAAe,EAA3B;AACAnB,IAAAA,KAAK,IAAIqB,SAAS,GAAGC,GAArB;AACAjC,IAAAA,CAAC,IAAI,CAAL;AACH;;AAED,SAAOD,CAAP;AACH,CA5BM;AA8BP,OAAO,MAAMmC,aAAa,GAAG,CAACf,OAAD,EAAUgB,UAAV,MAA0B;AACnD7B,EAAAA,EAAE,EAAG,SAAQa,OAAQ,IAAGgB,UAAW,EADgB;AAEnD3B,EAAAA,KAAK,EAAG,YAAW2B,UAAW,EAFqB;AAGnDC,EAAAA,QAAQ,EAAEL,aAAa,CAACI,UAAD;AAH4B,CAA1B,CAAtB;AAMP,OAAO,MAAME,UAAU,GAAGlB,OAAO,IAAI;AACjC,QAAMmB,MAAM,GAAGhD,IAAI,CAACqC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB1C,oBAA3B,IAAmD,CAApD,CAAJ,CAA2DoD,GAA3D,CAA+DvC,CAAC,IAAIkC,aAAa,CAACf,OAAD,EAAUnB,CAAC,GAAG,CAAd,CAAjF,CAAf;AACA,SAAO;AACHM,IAAAA,EAAE,EAAG,SAAQa,OAAQ,EADlB;AAEHX,IAAAA,KAAK,EAAG,SAAQW,OAAQ,EAFrB;AAGHiB,IAAAA,QAAQ,EAAEL,aAAa,CAACZ,OAAD,CAHpB;AAIHmB,IAAAA,MAJG;AAKH;AACA;AACAE,IAAAA,MAAM,EAAE;AAPL,GAAP;AASH,CAXM,C,CAaP;;AACA;;;;;;;;AASA,OAAO,MAAMC,eAAe,GAAGpD,SAAS,IAAI;AACxC,MAAIqD,YAAY,GAAG,EAAnB;AACCrD,EAAAA,SAAS,CAACsD,OAAV,CAAkBC,KAAK,IAAI;AACxBF,IAAAA,YAAY,CAACE,KAAK,CAACtC,EAAN,CAASuC,QAAT,EAAD,CAAZ,GAAoCC,aAAa,CAACF,KAAD,CAAjD;AACH,GAFA;AAGLG,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,YAA5B;AACI,SAAOA,YAAP;AAEH,CARM;AAUP,OAAO,MAAMI,aAAa,GAAGF,KAAK,IAAI;AAClC,QAAMN,MAAM,GAAGM,KAAK,CAACK,MAAN,CAAaV,GAAb,CAAiB,CAACW,QAAD,EAAWC,GAAX,KAAmBC,gBAAgB,CAACR,KAAK,CAACtC,EAAP,EAAW6C,GAAG,GAAG,CAAjB,EAAoBD,QAApB,CAApD,CAAf;AACA,SAAO;AACH5C,IAAAA,EAAE,EAAEsC,KAAK,CAACtC,EADP;AAEHE,IAAAA,KAAK,EAAEoC,KAAK,CAACpC,KAFV;AAGH4B,IAAAA,QAAQ,EAAEiB,gBAAgB,CAACT,KAAK,CAACtC,EAAP,EAAWsC,KAAK,CAACR,QAAjB,CAHvB;AAIHE,IAAAA,MAJG;AAKHE,IAAAA,MAAM,EAAE;AALL,GAAP;AAOH,CATM;AAUP,OAAO,MAAMa,gBAAgB,GAAE,CAAClC,OAAD,EAAUiB,QAAV,KAAuB;AAClD,SAAOA,QAAQ,CAACG,GAAT,CAAa,CAACe,EAAD,EAAKH,GAAL,KAAa;AAC7B,WAAOI,eAAe,CAACpC,OAAD,EAAUmC,EAAV,EAAcH,GAAd,CAAtB;AACH,GAFM,CAAP;AAGH,CAJM;AAMP,OAAO,MAAMI,eAAe,GAAG,CAACpC,OAAD,EAAUmC,EAAV,EAAeH,GAAf,KAAuB;AAClD,MAAIK,CAAC,GAAG3D,MAAM,CAAEyD,EAAE,CAACG,QAAL,CAAd;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAaQ,CAAb,EAAiBA,CAAjB;AACA,SAAO;AACHlD,IAAAA,EAAE,EAAG,GAAEa,OAAQ,OAAMgC,GAAI,EADtB;AAEH3C,IAAAA,KAAK,EAAE8C,EAAE,CAAC9C,KAFP;AAGHC,IAAAA,KAAK,EAAE6C,EAAE,CAACG,QAHP;AAIH7C,IAAAA,GAAG,EAAE0C,EAAE,CAACI,MAJL;AAKH1C,IAAAA,KAAK,EAAE;AACHM,MAAAA,eAAe,EAAEgC,EAAE,CAAChC,eADjB;AAEHD,MAAAA,KAAK,EAAEiC,EAAE,CAACjC,KAFP;AAGHE,MAAAA,YAAY,EAAE,KAHX;AAIHC,MAAAA,SAAS,EAAE,iCAJR;AAKHC,MAAAA,aAAa,EAAE;AALZ;AALJ,GAAP;AAaH,CAhBM;AAmBP,OAAO,MAAM2B,gBAAgB,GAAG,CAACjC,OAAD,EAAUgB,UAAV,EAAsBe,QAAtB,MAAoC;AAChE5C,EAAAA,EAAE,EAAE6B,UAD4D;AAEhE3B,EAAAA,KAAK,EAAE0C,QAAQ,CAAC1C,KAFgD;AAGhE4B,EAAAA,QAAQ,EAAEiB,gBAAgB,CAAClC,OAAD,EAAU+B,QAAQ,CAACd,QAAnB;AAHsC,CAApC,CAAzB","sourcesContent":["import {\r\n    START_YEAR,\r\n    NUM_OF_YEARS,\r\n    MONTH_NAMES,\r\n    MONTHS_PER_YEAR,\r\n    QUARTERS_PER_YEAR,\r\n    MONTHS_PER_QUARTER,\r\n    NUM_OF_MONTHS,\r\n    MAX_TRACK_START_GAP,\r\n    MAX_ELEMENT_GAP,\r\n    MAX_MONTH_SPAN,\r\n    MIN_MONTH_SPAN,\r\n    MAX_NUM_OF_SUBTRACKS, NUM_OF_TRACKS, dataTrack,\r\n} from './constants'\r\n\r\nimport { fill, hexToRgb, colourIsLight, addMonthsToYear, addMonthsToYearAsDate, nextColor, randomTitle } from './utils'\r\nimport  moment from 'moment';\r\n\r\nexport const buildQuarterCells = () => {\r\n    const v = []\r\n    for (let i = 0; i < QUARTERS_PER_YEAR * NUM_OF_YEARS; i += 1) {\r\n        const quarter = (i % 4) + 1\r\n        const startMonth = i * MONTHS_PER_QUARTER\r\n        const s = addMonthsToYear(START_YEAR, startMonth)\r\n        const e = addMonthsToYear(START_YEAR, startMonth + MONTHS_PER_QUARTER)\r\n        v.push({\r\n            id: `${s.year}-q${quarter}`,\r\n            title: `Q${quarter} ${s.year}`,\r\n            start: new Date(`${s.year}-${s.month}-01`),\r\n            end: new Date(`${e.year}-${e.month}-01`),\r\n        })\r\n    }\r\n    return v\r\n}\r\n\r\nexport const buildMonthCells = () => {\r\n    const v = []\r\n    for (let i = 0; i < MONTHS_PER_YEAR * NUM_OF_YEARS; i += 1) {\r\n        const startMonth = i\r\n        const start = addMonthsToYearAsDate(START_YEAR, startMonth)\r\n        const end = addMonthsToYearAsDate(START_YEAR, startMonth + 1)\r\n        v.push({\r\n            id: `m${startMonth}`,\r\n            title: MONTH_NAMES[i % 12],\r\n            start,\r\n            end,\r\n        })\r\n    }\r\n    return v\r\n}\r\n\r\nexport const buildTimebar = () => [\r\n    {\r\n        id: 'quarters',\r\n        title: 'Quarters',\r\n        cells: buildQuarterCells(),\r\n        style: {},\r\n    },\r\n    {\r\n        id: 'months',\r\n        title: 'Months',\r\n        cells: buildMonthCells(),\r\n        useAsGrid: true,\r\n        style: {},\r\n    },\r\n]\r\n\r\nexport const buildElement = ({ trackId, start, end, i }) => {\r\n    const bgColor = nextColor()\r\n    const color = colourIsLight(...hexToRgb(bgColor)) ? '#000000' : '#ffffff'\r\n    return {\r\n        id: `t-${trackId}-el-${i}`,\r\n        title: randomTitle(),\r\n        start,\r\n        end,\r\n        style: {\r\n            backgroundColor: `#${bgColor}`,\r\n            color,\r\n            borderRadius: '4px',\r\n            boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\r\n            textTransform: 'capitalize',\r\n        },\r\n    }\r\n}\r\n\r\nexport const buildTrackStartGap = () => Math.floor(Math.random() * MAX_TRACK_START_GAP)\r\nexport const buildElementGap = () => Math.floor(Math.random() * MAX_ELEMENT_GAP)\r\n\r\nexport const buildElements = trackId => {\r\n    const v = []\r\n    let i = 1\r\n    let month = buildTrackStartGap()\r\n\r\n    while (month < NUM_OF_MONTHS) {\r\n        let monthSpan = Math.floor(Math.random() * (MAX_MONTH_SPAN - (MIN_MONTH_SPAN - 1))) + MIN_MONTH_SPAN\r\n\r\n        if (month + monthSpan > NUM_OF_MONTHS) {\r\n            monthSpan = NUM_OF_MONTHS - month\r\n        }\r\n\r\n        const start = addMonthsToYearAsDate(START_YEAR, month)\r\n        const end = addMonthsToYearAsDate(START_YEAR, month + monthSpan)\r\n        v.push(\r\n            buildElement({\r\n                trackId,\r\n                start,\r\n                end,\r\n                i,\r\n            })\r\n        )\r\n        const gap = buildElementGap()\r\n        month += monthSpan + gap\r\n        i += 1\r\n    }\r\n\r\n    return v\r\n}\r\n\r\nexport const buildSubtrack = (trackId, subtrackId) => ({\r\n    id: `track-${trackId}-${subtrackId}`,\r\n    title: `Subtrack ${subtrackId}`,\r\n    elements: buildElements(subtrackId),\r\n})\r\n\r\nexport const buildTrack = trackId => {\r\n    const tracks = fill(Math.floor(Math.random() * MAX_NUM_OF_SUBTRACKS) + 1).map(i => buildSubtrack(trackId, i + 1))\r\n    return {\r\n        id: `track-${trackId}`,\r\n        title: `Track ${trackId}`,\r\n        elements: buildElements(trackId),\r\n        tracks,\r\n        // hasButton: true,\r\n        // link: 'www.google.com',\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\n//>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n/*\r\n*  const tracksById = fill(NUM_OF_TRACKS).reduce((acc, i) => {\r\n            const track = buildTrack(i + 1)\r\n            acc[track.id] = track\r\n            return acc\r\n        }, {})\r\n*/\r\n\r\n\r\nexport const parseDateTracks = dataTrack => {\r\n    let mapDataTrack = {};\r\n     dataTrack.forEach(track => {\r\n        mapDataTrack[track.id.toString()] = newBuildTrack(track)\r\n    });\r\nconsole.log('mapDataTrack', mapDataTrack)\r\n    return mapDataTrack\r\n\r\n}\r\n\r\nexport const newBuildTrack = track => {\r\n    const tracks = track.childs.map((subtrack, idx) => newBuildSubtrack(track.id, idx + 1, subtrack));\r\n    return {\r\n        id: track.id,\r\n        title: track.title,\r\n        elements: newBuildElements(track.id, track.elements),\r\n        tracks,\r\n        isOpen: false,\r\n    }\r\n}\r\nexport const newBuildElements =(trackId, elements) => {\r\n    return elements.map((el, idx) => {\r\n        return newBuildElement(trackId, el, idx)\r\n    })\r\n}\r\n\r\nexport const newBuildElement = (trackId, el,  idx) => {\r\n    let a = moment( el.dateFrom);\r\n    console.log( a,  a)\r\n    return {\r\n        id: `${trackId}-el-${idx}`,\r\n        title: el.title,\r\n        start: el.dateFrom,\r\n        end: el.dateTo,\r\n        style: {\r\n            backgroundColor: el.backgroundColor,\r\n            color: el.color,\r\n            borderRadius: '4px',\r\n            boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\r\n            textTransform: 'capitalize',\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport const newBuildSubtrack = (trackId, subtrackId, subtrack) => ({\r\n    id: subtrackId,\r\n    title: subtrack.title,\r\n    elements: newBuildElements(trackId, subtrack.elements),\r\n})"]},"metadata":{},"sourceType":"module"}