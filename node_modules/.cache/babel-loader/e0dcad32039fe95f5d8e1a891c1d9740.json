{"ast":null,"code":"import { START_YEAR, NUM_OF_YEARS, MONTH_NAMES, MONTHS_PER_YEAR, QUARTERS_PER_YEAR, MONTHS_PER_QUARTER, NUM_OF_MONTHS, MAX_TRACK_START_GAP, MAX_ELEMENT_GAP, MAX_MONTH_SPAN, MIN_MONTH_SPAN, MAX_NUM_OF_SUBTRACKS } from './constants';\nimport { fill, hexToRgb, colourIsLight, addMonthsToYear, addMonthsToYearAsDate, nextColor, randomTitle } from './utils';\nexport const buildQuarterCells = () => {\n  const v = [];\n\n  for (let i = 0; i < QUARTERS_PER_YEAR * NUM_OF_YEARS; i += 1) {\n    const quarter = i % 4 + 1;\n    const startMonth = i * MONTHS_PER_QUARTER;\n    const s = addMonthsToYear(START_YEAR, startMonth);\n    const e = addMonthsToYear(START_YEAR, startMonth + MONTHS_PER_QUARTER);\n    v.push({\n      id: `${s.year}-q${quarter}`,\n      title: `К${quarter} ${s.year}`,\n      start: new Date(`${s.year}-${s.month}-01`),\n      end: new Date(`${e.year}-${e.month}-01`)\n    });\n  }\n\n  return v;\n};\nexport const buildMonthCells = () => {\n  const v = [];\n\n  for (let i = 0; i < MONTHS_PER_YEAR * NUM_OF_YEARS; i += 1) {\n    const startMonth = i;\n    const start = addMonthsToYearAsDate(START_YEAR, startMonth);\n    const end = addMonthsToYearAsDate(START_YEAR, startMonth + 1);\n    v.push({\n      id: `m${startMonth}`,\n      title: MONTH_NAMES[i % 12],\n      start,\n      end\n    });\n  }\n\n  return v;\n};\nexport const buildTimebar = () => [{\n  id: 'quarters',\n  title: 'Кварталы',\n  cells: buildQuarterCells(),\n  style: {}\n}, {\n  id: 'months',\n  title: 'Месяца',\n  cells: buildMonthCells(),\n  useAsGrid: true,\n  style: {}\n}];\nexport const buildElement = ({\n  trackId,\n  start,\n  end,\n  i\n}) => {\n  const bgColor = nextColor();\n  const color = colourIsLight(...hexToRgb(bgColor)) ? '#000000' : '#ffffff';\n  return {\n    id: `t-${trackId}-el-${i}`,\n    title: randomTitle(),\n    start,\n    end,\n    style: {\n      backgroundColor: `#${bgColor}`,\n      color,\n      borderRadius: '4px',\n      boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\n      textTransform: 'capitalize'\n    }\n  };\n};\nexport const buildTrackStartGap = () => Math.floor(Math.random() * MAX_TRACK_START_GAP);\nexport const buildElementGap = () => Math.floor(Math.random() * MAX_ELEMENT_GAP);\nexport const buildElements = trackId => {\n  const v = [];\n  let i = 1;\n  let month = buildTrackStartGap();\n\n  while (month < NUM_OF_MONTHS) {\n    let monthSpan = Math.floor(Math.random() * (MAX_MONTH_SPAN - (MIN_MONTH_SPAN - 1))) + MIN_MONTH_SPAN;\n\n    if (month + monthSpan > NUM_OF_MONTHS) {\n      monthSpan = NUM_OF_MONTHS - month;\n    }\n\n    const start = addMonthsToYearAsDate(START_YEAR, month);\n    const end = addMonthsToYearAsDate(START_YEAR, month + monthSpan);\n    v.push(buildElement({\n      trackId,\n      start,\n      end,\n      i\n    }));\n    const gap = buildElementGap();\n    month += monthSpan + gap;\n    i += 1;\n  }\n\n  return v;\n};\nexport const buildSubtrack = (trackId, subtrackId) => ({\n  id: `track-${trackId}-${subtrackId}`,\n  title: `Subtrack ${subtrackId}`,\n  elements: buildElements(subtrackId)\n});\nexport const buildTrack = trackId => {\n  const tracks = fill(Math.floor(Math.random() * MAX_NUM_OF_SUBTRACKS) + 1).map(i => buildSubtrack(trackId, i + 1));\n  return {\n    id: `track-${trackId}`,\n    title: `Track ${trackId}`,\n    elements: buildElements(trackId),\n    tracks,\n    isOpen: false\n  };\n}; //>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nexport const parseDataTracks = dataTrack => {\n  if (!dataTrack || dataTrack.length === 0) {\n    return {};\n  }\n\n  let mapDataTrack = {};\n  dataTrack.forEach(track => {\n    mapDataTrack[track.id.toString()] = newBuildTrack(track);\n  });\n\n  if (Object.keys(mapDataTrack).length === 0) {\n    return {};\n  }\n\n  console.log('mapDataTrack', mapDataTrack);\n  return mapDataTrack;\n};\nexport const newBuildTrack = track => {\n  const tracks = track.childs.map((subtrack, idx) => newBuildSubtrack(track.id, idx + 1, subtrack));\n  return {\n    id: track.id,\n    title: track.title,\n    elements: newBuildElements(track.id, track.elements),\n    tracks,\n    isOpen: false\n  };\n};\nexport const newBuildElements = (trackId, elements) => {\n  return elements.map((el, idx) => {\n    return newBuildElement(trackId, el, idx);\n  });\n};\nexport const newBuildElement = (trackId, el, idx) => {\n  let dateFromCalendar = el.dateFrom.calendar;\n  let dateToCalendar = el.dateTo.calendar;\n  let start = new Date(`${dateFromCalendar.dayOfMonth}/${dateFromCalendar.month}/${dateFromCalendar.year}`);\n  let end = new Date(`${dateToCalendar.dayOfMonth}/${dateToCalendar.month}/${dateToCalendar.year}`);\n  return {\n    id: `${trackId}-el-${idx}`,\n    title: el.title,\n    start: start,\n    end: end,\n    style: {\n      backgroundColor: el.backgroundColor,\n      color: el.color,\n      borderRadius: '4px',\n      boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\n      textTransform: 'capitalize'\n    }\n  };\n};\nexport const newBuildSubtrack = (trackId, subtrackId, subtrack) => ({\n  id: subtrackId,\n  title: subtrack.title,\n  elements: newBuildElements(trackId, subtrack.elements)\n});","map":{"version":3,"sources":["C:/Users/PC/work/react-timeline-9000/src/builders.js"],"names":["START_YEAR","NUM_OF_YEARS","MONTH_NAMES","MONTHS_PER_YEAR","QUARTERS_PER_YEAR","MONTHS_PER_QUARTER","NUM_OF_MONTHS","MAX_TRACK_START_GAP","MAX_ELEMENT_GAP","MAX_MONTH_SPAN","MIN_MONTH_SPAN","MAX_NUM_OF_SUBTRACKS","fill","hexToRgb","colourIsLight","addMonthsToYear","addMonthsToYearAsDate","nextColor","randomTitle","buildQuarterCells","v","i","quarter","startMonth","s","e","push","id","year","title","start","Date","month","end","buildMonthCells","buildTimebar","cells","style","useAsGrid","buildElement","trackId","bgColor","color","backgroundColor","borderRadius","boxShadow","textTransform","buildTrackStartGap","Math","floor","random","buildElementGap","buildElements","monthSpan","gap","buildSubtrack","subtrackId","elements","buildTrack","tracks","map","isOpen","parseDataTracks","dataTrack","length","mapDataTrack","forEach","track","toString","newBuildTrack","Object","keys","console","log","childs","subtrack","idx","newBuildSubtrack","newBuildElements","el","newBuildElement","dateFromCalendar","dateFrom","calendar","dateToCalendar","dateTo","dayOfMonth"],"mappings":"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","sourcesContent":["import {\r\n    START_YEAR,\r\n    NUM_OF_YEARS,\r\n    MONTH_NAMES,\r\n    MONTHS_PER_YEAR,\r\n    QUARTERS_PER_YEAR,\r\n    MONTHS_PER_QUARTER,\r\n    NUM_OF_MONTHS,\r\n    MAX_TRACK_START_GAP,\r\n    MAX_ELEMENT_GAP,\r\n    MAX_MONTH_SPAN,\r\n    MIN_MONTH_SPAN,\r\n    MAX_NUM_OF_SUBTRACKS\r\n} from './constants'\r\n\r\nimport {fill, hexToRgb, colourIsLight, addMonthsToYear, addMonthsToYearAsDate, nextColor, randomTitle} from './utils'\r\n\r\nexport const buildQuarterCells = () => {\r\n    const v = []\r\n    for (let i = 0; i < QUARTERS_PER_YEAR * NUM_OF_YEARS; i += 1) {\r\n        const quarter = (i % 4) + 1\r\n        const startMonth = i * MONTHS_PER_QUARTER\r\n        const s = addMonthsToYear(START_YEAR, startMonth)\r\n        const e = addMonthsToYear(START_YEAR, startMonth + MONTHS_PER_QUARTER)\r\n        v.push({\r\n            id: `${s.year}-q${quarter}`,\r\n            title: `К${quarter} ${s.year}`,\r\n            start: new Date(`${s.year}-${s.month}-01`),\r\n            end: new Date(`${e.year}-${e.month}-01`),\r\n        })\r\n    }\r\n    return v\r\n}\r\n\r\nexport const buildMonthCells = () => {\r\n    const v = []\r\n    for (let i = 0; i < MONTHS_PER_YEAR * NUM_OF_YEARS; i += 1) {\r\n        const startMonth = i\r\n        const start = addMonthsToYearAsDate(START_YEAR, startMonth)\r\n        const end = addMonthsToYearAsDate(START_YEAR, startMonth + 1)\r\n        v.push({\r\n            id: `m${startMonth}`,\r\n            title: MONTH_NAMES[i % 12],\r\n            start,\r\n            end,\r\n        })\r\n    }\r\n    return v\r\n}\r\n\r\nexport const buildTimebar = () => [\r\n    {\r\n        id: 'quarters',\r\n        title: 'Кварталы',\r\n        cells: buildQuarterCells(),\r\n        style: {},\r\n    },\r\n    {\r\n        id: 'months',\r\n        title: 'Месяца',\r\n        cells: buildMonthCells(),\r\n        useAsGrid: true,\r\n        style: {},\r\n    },\r\n]\r\n\r\nexport const buildElement = ({trackId, start, end, i}) => {\r\n    const bgColor = nextColor()\r\n    const color = colourIsLight(...hexToRgb(bgColor)) ? '#000000' : '#ffffff'\r\n    return {\r\n        id: `t-${trackId}-el-${i}`,\r\n        title: randomTitle(),\r\n        start,\r\n        end,\r\n        style: {\r\n            backgroundColor: `#${bgColor}`,\r\n            color,\r\n            borderRadius: '4px',\r\n            boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\r\n            textTransform: 'capitalize',\r\n        },\r\n    }\r\n}\r\n\r\nexport const buildTrackStartGap = () => Math.floor(Math.random() * MAX_TRACK_START_GAP)\r\nexport const buildElementGap = () => Math.floor(Math.random() * MAX_ELEMENT_GAP)\r\n\r\nexport const buildElements = trackId => {\r\n    const v = []\r\n    let i = 1\r\n    let month = buildTrackStartGap()\r\n\r\n    while (month < NUM_OF_MONTHS) {\r\n        let monthSpan = Math.floor(Math.random() * (MAX_MONTH_SPAN - (MIN_MONTH_SPAN - 1))) + MIN_MONTH_SPAN\r\n\r\n        if (month + monthSpan > NUM_OF_MONTHS) {\r\n            monthSpan = NUM_OF_MONTHS - month\r\n        }\r\n\r\n        const start = addMonthsToYearAsDate(START_YEAR, month)\r\n        const end = addMonthsToYearAsDate(START_YEAR, month + monthSpan)\r\n        v.push(\r\n            buildElement({\r\n                trackId,\r\n                start,\r\n                end,\r\n                i,\r\n            })\r\n        )\r\n        const gap = buildElementGap()\r\n        month += monthSpan + gap\r\n        i += 1\r\n    }\r\n\r\n    return v\r\n}\r\n\r\nexport const buildSubtrack = (trackId, subtrackId) => ({\r\n    id: `track-${trackId}-${subtrackId}`,\r\n    title: `Subtrack ${subtrackId}`,\r\n    elements: buildElements(subtrackId),\r\n})\r\n\r\nexport const buildTrack = trackId => {\r\n    const tracks = fill(Math.floor(Math.random() * MAX_NUM_OF_SUBTRACKS) + 1).map(i => buildSubtrack(trackId, i + 1))\r\n    return {\r\n        id: `track-${trackId}`,\r\n        title: `Track ${trackId}`,\r\n        elements: buildElements(trackId),\r\n        tracks,\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\n//>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nexport const parseDataTracks = dataTrack => {\r\n    if(!dataTrack || dataTrack.length === 0) {\r\n        return {}\r\n    }\r\n    let mapDataTrack = {};\r\n    dataTrack.forEach(track => {\r\n        mapDataTrack[track.id.toString()] = newBuildTrack(track);\r\n    });\r\n    if(Object.keys(mapDataTrack).length === 0) {\r\n        return {}\r\n    }\r\n    console.log('mapDataTrack', mapDataTrack)\r\n    return mapDataTrack\r\n}\r\n\r\nexport const newBuildTrack = track => {\r\n    const tracks = track.childs.map((subtrack, idx) => newBuildSubtrack(track.id, idx + 1, subtrack));\r\n    return {\r\n        id: track.id,\r\n        title: track.title,\r\n        elements: newBuildElements(track.id, track.elements),\r\n        tracks,\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\nexport const newBuildElements = (trackId, elements) => {\r\n    return elements.map((el, idx) => {\r\n        return newBuildElement(trackId, el, idx)\r\n    })\r\n}\r\n\r\nexport const newBuildElement = (trackId, el, idx) => {\r\n    let dateFromCalendar = el.dateFrom.calendar;\r\n    let dateToCalendar = el.dateTo.calendar;\r\n\r\n    let start = new Date(`${dateFromCalendar.dayOfMonth}/${dateFromCalendar.month}/${dateFromCalendar.year}`);\r\n    let end = new Date(`${dateToCalendar.dayOfMonth}/${dateToCalendar.month}/${dateToCalendar.year}`);\r\n\r\n    return {\r\n        id: `${trackId}-el-${idx}`,\r\n        title: el.title,\r\n        start: start,\r\n        end: end,\r\n        style: {\r\n            backgroundColor: el.backgroundColor,\r\n            color: el.color,\r\n            borderRadius: '4px',\r\n            boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\r\n            textTransform: 'capitalize',\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport const newBuildSubtrack = (trackId, subtrackId, subtrack) => ({\r\n    id: subtrackId,\r\n    title: subtrack.title,\r\n    elements: newBuildElements(trackId, subtrack.elements),\r\n})"]},"metadata":{},"sourceType":"module"}