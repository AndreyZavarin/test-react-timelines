{"ast":null,"code":"import { START_YEAR, NUM_OF_YEARS, MONTH_NAMES, MONTHS_PER_YEAR, QUARTERS_PER_YEAR, MONTHS_PER_QUARTER, NUM_OF_MONTHS, MAX_TRACK_START_GAP, MAX_ELEMENT_GAP, MAX_MONTH_SPAN, MIN_MONTH_SPAN, MAX_NUM_OF_SUBTRACKS } from './constants';\nimport { fill, hexToRgb, colourIsLight, addMonthsToYear, addMonthsToYearAsDate, nextColor, randomTitle } from './utils';\nexport const buildQuarterCells = () => {\n  const v = [];\n\n  for (let i = 0; i < QUARTERS_PER_YEAR * NUM_OF_YEARS; i += 1) {\n    const quarter = i % 4 + 1;\n    const startMonth = i * MONTHS_PER_QUARTER;\n    const s = addMonthsToYear(START_YEAR, startMonth);\n    const e = addMonthsToYear(START_YEAR, startMonth + MONTHS_PER_QUARTER);\n    v.push({\n      id: `${s.year}-q${quarter}`,\n      title: `Q${quarter} ${s.year}`,\n      start: new Date(`${s.year}-${s.month}-01`),\n      end: new Date(`${e.year}-${e.month}-01`)\n    });\n  }\n\n  console.log('v', v);\n  return v;\n};\nexport const buildMonthCells = () => {\n  const v = [];\n\n  for (let i = 0; i < MONTHS_PER_YEAR * NUM_OF_YEARS; i += 1) {\n    const startMonth = i;\n    const start = addMonthsToYearAsDate(START_YEAR, startMonth);\n    const end = addMonthsToYearAsDate(START_YEAR, startMonth + 1);\n    v.push({\n      id: `m${startMonth}`,\n      title: MONTH_NAMES[i % 12],\n      start,\n      end\n    });\n  }\n\n  return v;\n};\nexport const buildTimebar = () => [{\n  id: 'quarters',\n  title: 'Quarters',\n  cells: buildQuarterCells(),\n  style: {}\n}, {\n  id: 'months',\n  title: 'Months',\n  cells: buildMonthCells(),\n  useAsGrid: true,\n  style: {}\n}];\nexport const buildElement = ({\n  trackId,\n  start,\n  end,\n  i\n}) => {\n  const bgColor = nextColor();\n  const color = colourIsLight(...hexToRgb(bgColor)) ? '#000000' : '#ffffff';\n  return {\n    id: `t-${trackId}-el-${i}`,\n    title: randomTitle(),\n    start,\n    end,\n    style: {\n      backgroundColor: `#${bgColor}`,\n      color,\n      borderRadius: '4px',\n      boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\n      textTransform: 'capitalize'\n    }\n  };\n};\nexport const buildTrackStartGap = () => Math.floor(Math.random() * MAX_TRACK_START_GAP);\nexport const buildElementGap = () => Math.floor(Math.random() * MAX_ELEMENT_GAP);\nexport const buildElements = trackId => {\n  const v = [];\n  let i = 1;\n  let month = buildTrackStartGap();\n\n  while (month < NUM_OF_MONTHS) {\n    let monthSpan = Math.floor(Math.random() * (MAX_MONTH_SPAN - (MIN_MONTH_SPAN - 1))) + MIN_MONTH_SPAN;\n\n    if (month + monthSpan > NUM_OF_MONTHS) {\n      monthSpan = NUM_OF_MONTHS - month;\n    }\n\n    const start = addMonthsToYearAsDate(START_YEAR, month);\n    const end = addMonthsToYearAsDate(START_YEAR, month + monthSpan);\n    v.push(buildElement({\n      trackId,\n      start,\n      end,\n      i\n    }));\n    const gap = buildElementGap();\n    month += monthSpan + gap;\n    i += 1;\n  }\n\n  return v;\n}; // export const buildSubtrack = (trackId, subtrackId) => ({\n//     id: `track-${trackId}-${subtrackId}`,\n//     title: `Subtrack ${subtrackId}`,\n//     elements: buildElements(subtrackId),\n// })\n\nexport const buildSubtrack = (trackId, subtrackId) => {\n  return {\n    id: `track-${trackId}-${subtrackId}`,\n    title: `Subtrack ${subtrackId}`,\n    elements: buildElements(subtrackId)\n  };\n};\nexport const buildTrack = trackId => {\n  const tracks = fill(Math.floor(Math.random() * MAX_NUM_OF_SUBTRACKS) + 1).map(i => buildSubtrack(trackId, i + 1));\n  return {\n    id: `track-${trackId}`,\n    title: `Track ${trackId}`,\n    elements: buildElements(trackId),\n    tracks,\n    // hasButton: true,\n    // link: 'www.google.com',\n    isOpen: false\n  };\n}; //\n// const track = {\n//     id: '',\n//     title: '',\n//     dateTo:'',\n//     dateFrom: '',\n//     childs: '' array <track>   >>> Subtrack\n//     color: ''\n// }","map":{"version":3,"sources":["C:/Users/PC/work/react-timeline-9000/src/builders.js"],"names":["START_YEAR","NUM_OF_YEARS","MONTH_NAMES","MONTHS_PER_YEAR","QUARTERS_PER_YEAR","MONTHS_PER_QUARTER","NUM_OF_MONTHS","MAX_TRACK_START_GAP","MAX_ELEMENT_GAP","MAX_MONTH_SPAN","MIN_MONTH_SPAN","MAX_NUM_OF_SUBTRACKS","fill","hexToRgb","colourIsLight","addMonthsToYear","addMonthsToYearAsDate","nextColor","randomTitle","buildQuarterCells","v","i","quarter","startMonth","s","e","push","id","year","title","start","Date","month","end","console","log","buildMonthCells","buildTimebar","cells","style","useAsGrid","buildElement","trackId","bgColor","color","backgroundColor","borderRadius","boxShadow","textTransform","buildTrackStartGap","Math","floor","random","buildElementGap","buildElements","monthSpan","gap","buildSubtrack","subtrackId","elements","buildTrack","tracks","map","isOpen"],"mappings":"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","sourcesContent":["import {\r\n    START_YEAR,\r\n    NUM_OF_YEARS,\r\n    MONTH_NAMES,\r\n    MONTHS_PER_YEAR,\r\n    QUARTERS_PER_YEAR,\r\n    MONTHS_PER_QUARTER,\r\n    NUM_OF_MONTHS,\r\n    MAX_TRACK_START_GAP,\r\n    MAX_ELEMENT_GAP,\r\n    MAX_MONTH_SPAN,\r\n    MIN_MONTH_SPAN,\r\n    MAX_NUM_OF_SUBTRACKS,\r\n} from './constants'\r\n\r\nimport { fill, hexToRgb, colourIsLight, addMonthsToYear, addMonthsToYearAsDate, nextColor, randomTitle } from './utils'\r\n\r\nexport const buildQuarterCells = () => {\r\n    const v = []\r\n    for (let i = 0; i < QUARTERS_PER_YEAR * NUM_OF_YEARS; i += 1) {\r\n        const quarter = (i % 4) + 1\r\n        const startMonth = i * MONTHS_PER_QUARTER\r\n        const s = addMonthsToYear(START_YEAR, startMonth)\r\n        const e = addMonthsToYear(START_YEAR, startMonth + MONTHS_PER_QUARTER)\r\n        v.push({\r\n            id: `${s.year}-q${quarter}`,\r\n            title: `Q${quarter} ${s.year}`,\r\n            start: new Date(`${s.year}-${s.month}-01`),\r\n            end: new Date(`${e.year}-${e.month}-01`),\r\n        })\r\n    }\r\n    console.log('v', v)\r\n\r\n    return v\r\n}\r\n\r\nexport const buildMonthCells = () => {\r\n    const v = []\r\n    for (let i = 0; i < MONTHS_PER_YEAR * NUM_OF_YEARS; i += 1) {\r\n        const startMonth = i\r\n        const start = addMonthsToYearAsDate(START_YEAR, startMonth)\r\n        const end = addMonthsToYearAsDate(START_YEAR, startMonth + 1)\r\n        v.push({\r\n            id: `m${startMonth}`,\r\n            title: MONTH_NAMES[i % 12],\r\n            start,\r\n            end,\r\n        })\r\n    }\r\n    return v\r\n}\r\n\r\nexport const buildTimebar = () => [\r\n    {\r\n        id: 'quarters',\r\n        title: 'Quarters',\r\n        cells: buildQuarterCells(),\r\n        style: {},\r\n    },\r\n    {\r\n        id: 'months',\r\n        title: 'Months',\r\n        cells: buildMonthCells(),\r\n        useAsGrid: true,\r\n        style: {},\r\n    },\r\n]\r\n\r\nexport const buildElement = ({ trackId, start, end, i }) => {\r\n    const bgColor = nextColor()\r\n    const color = colourIsLight(...hexToRgb(bgColor)) ? '#000000' : '#ffffff'\r\n    return {\r\n        id: `t-${trackId}-el-${i}`,\r\n        title: randomTitle(),\r\n        start,\r\n        end,\r\n        style: {\r\n            backgroundColor: `#${bgColor}`,\r\n            color,\r\n            borderRadius: '4px',\r\n            boxShadow: '1px 1px 0px rgba(0, 0, 0, 0.25)',\r\n            textTransform: 'capitalize',\r\n        },\r\n    }\r\n}\r\n\r\nexport const buildTrackStartGap = () => Math.floor(Math.random() * MAX_TRACK_START_GAP)\r\nexport const buildElementGap = () => Math.floor(Math.random() * MAX_ELEMENT_GAP)\r\n\r\nexport const buildElements = trackId => {\r\n    const v = []\r\n    let i = 1\r\n    let month = buildTrackStartGap()\r\n\r\n    while (month < NUM_OF_MONTHS) {\r\n        let monthSpan = Math.floor(Math.random() * (MAX_MONTH_SPAN - (MIN_MONTH_SPAN - 1))) + MIN_MONTH_SPAN\r\n\r\n        if (month + monthSpan > NUM_OF_MONTHS) {\r\n            monthSpan = NUM_OF_MONTHS - month\r\n        }\r\n\r\n        const start = addMonthsToYearAsDate(START_YEAR, month)\r\n        const end = addMonthsToYearAsDate(START_YEAR, month + monthSpan)\r\n        v.push(\r\n            buildElement({\r\n                trackId,\r\n                start,\r\n                end,\r\n                i,\r\n            })\r\n        )\r\n        const gap = buildElementGap()\r\n        month += monthSpan + gap\r\n        i += 1\r\n    }\r\n\r\n    return v\r\n}\r\n\r\n// export const buildSubtrack = (trackId, subtrackId) => ({\r\n//     id: `track-${trackId}-${subtrackId}`,\r\n//     title: `Subtrack ${subtrackId}`,\r\n//     elements: buildElements(subtrackId),\r\n// })\r\n\r\nexport const buildSubtrack = (trackId, subtrackId) => {\r\n    return {\r\n        id: `track-${trackId}-${subtrackId}`,\r\n        title: `Subtrack ${subtrackId}`,\r\n        elements: buildElements(subtrackId)\r\n    }\r\n}\r\n\r\nexport const buildTrack = trackId => {\r\n    const tracks = fill(Math.floor(Math.random() * MAX_NUM_OF_SUBTRACKS) + 1).map(i => buildSubtrack(trackId, i + 1))\r\n    return {\r\n        id: `track-${trackId}`,\r\n        title: `Track ${trackId}`,\r\n        elements: buildElements(trackId),\r\n        tracks,\r\n        // hasButton: true,\r\n        // link: 'www.google.com',\r\n        isOpen: false,\r\n    }\r\n}\r\n\r\n//\r\n// const track = {\r\n//     id: '',\r\n//     title: '',\r\n//     dateTo:'',\r\n//     dateFrom: '',\r\n//     childs: '' array <track>   >>> Subtrack\r\n//     color: ''\r\n// }"]},"metadata":{},"sourceType":"module"}